
<a href="/projects/" title="Selenium Projects">Projects</a>

//tagName[@attributeName = 'attributeValue']

Xpath 

//a[@href = '/projects/']
//a[@title = 'Selenium Projects']

CSS

a[href = '/projects/']
a[title = 'Selenium Projects']


//a[@contans(text(), 'Downloads')]

<li id="menu_documentation">
<a href="/docs/" title="Technical references and guides">Documentation</a></li>

//li[@id = 'menu_documentation']/a
//a[@href='/docs/']
//a[@title='Technical references and guides']
//a[contains(text(), 'Documentation')]

li[id = 'menu_documentation']>a
a[href='/docs/']
a[title='Technical references and guides']
a[contains(text(), 'Documentation')]



<h2>What is Selenium?</h2>

//h2[contains(text) , 'What is Selenium']


<input type="text" id="q" name="q" accesskey="s" size="30">


//input[@id='q']
//input[@name='q']


#q
input[id='q']
input[name='q']

<input type="submit" id="submit" value="Go">

//input[@id = 'submit']
//input[@id = 'submit' and @type='submit'] 

#submit

input[id = 'submit'][type='submit'] 


<h3>Selenium WebDriver</h3>


Git Commands ----------*********-------------

1.	Open Git Bash.
2.	Change the current working directory to your local project.
3.	Initialize the local directory as a Git repository – git init
4.	Add the files – git add . (git add file_name)
5.	Commit the files – git commit –m “First Commit”
6.	Add the URL for the remote repository – git remote add origin url 
7.	Check existing remote - git remote –v
8.	Push the commit – git push origin master  
9.	Set the URL - git remote set-url origin url
10.	Remove remote – git remove rm origin
11. Pull updated project from repository - git pull
12. Create branch - git checkout -b "Amit_local"
13. To check all the branch - git branch
14. Push the commit on local branch -  git push --set-upstream origin Amit_local
15. Check the status - git status


*/ ----- Data Provider --------


public class testpractis {
	
	@Test (dataProvider = "UserNamePassword") 
	//@Parameters ({"userName","passWord"})
	public void testingDataProvider(String userName, String passWord){
			
		System.out.println("userName : "+userName);
		System.out.println("passWord : "+passWord);
		
	}
	
	public String[][] getExcelData(String fileName, String sheetName) {
		
		String[][] ar = null;
		
		try {
			
			FileInputStream fs = new FileInputStream(new File(fileName));
			XSSFWorkbook wb = new XSSFWorkbook(fs);
			XSSFSheet sh = wb.getSheet(sheetName);

			int totalNoOfRows = sh.getLastRowNum()+1;
			int totalNoOfCols = sh.getRow(0).getLastCellNum();
			
			ar = new String[totalNoOfRows-1][totalNoOfCols];
			
			for (int i= 1 ; i < totalNoOfRows; i++) {
				XSSFRow rows = sh.getRow(i);
				for (int j=0; j < totalNoOfCols; j++) {
					XSSFCell cell = rows.getCell(j);
					ar[i-1][j] = cell.getStringCellValue();
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		} 
		
		return ar;
	}
	
	@DataProvider (name = "UserNamePassword")
	public Object[][] getData()	{
	
		Object[][] data = getExcelData("\\D:\\TestPractisData.xlsx","LoginTestData"); 	
		
		/*Object[][] data = new Object[3][2];

		data[0][0] ="sampleuser1";
		data[0][1] = "abcdef";

		data[1][0] ="testuser2";
		data[1][1] = "zxcvb";
	
		data[2][0] ="guestuser3";
		data[2][1] = "pass123";*/

	return data;
	
	}
}


